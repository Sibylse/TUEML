Traceback (most recent call last):
  File "/opt/homebrew/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/opt/homebrew/lib/python3.9/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/homebrew/lib/python3.9/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/opt/homebrew/lib/python3.9/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/opt/homebrew/Cellar/python@3.9/3.9.13_1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py", line 647, in run_until_complete
    return future.result()
  File "/opt/homebrew/lib/python3.9/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/opt/homebrew/lib/python3.9/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/homebrew/lib/python3.9/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
from sklearn.inspection import DecisionBoundaryDisplay
from matplotlib.colors import ListedColormap, LinearSegmentedColormap
from sklearn.datasets import make_moons


X,y = make_moons(noise=0.3, random_state=0, n_samples=200)
X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.4, random_state=42
    )

fig, axs = plt.subplots(ncols=2, figsize=(12, 5))
cm_0 = LinearSegmentedColormap.from_list("mycmap", ["#ffffff","#a0c3ff"])
cm_1 = LinearSegmentedColormap.from_list("mycmap", ["#ffffff", "#ffa1cf"])
cmaps = [cm_0,cm_1]
cm_points = ListedColormap(["#007bff", "magenta"])
for ax, k in zip(axs, (0,1)):
    gnb = GaussianNB()
    y_pred = gnb.fit(X_train, y_train)
    x = np.arange(-2, 3, 0.05)
    y = np.arange(-2, 3, 0.05)

    xx, yy = np.meshgrid(x, y)
    X = np.array([xx,yy]).reshape(2,x.shape[0]*y.shape[0]).T
    Z = gnb.predict_joint_log_proba(np.c_[xx.ravel(), yy.ravel()])
    h = ax.contourf(x,y,Z[:,k].reshape((y.shape[0],x.shape[0])),cmap=cmaps[k])

    ax.axis('scaled')
    scatter = ax.scatter(X_train[:, 0], X_train[:, 1], c=y_train, edgecolors="k",cmap = cm_points)
    _ = ax.set_title(
        f"Two moons log p(x,y={k}) Gaussian Naive Bayes"
    )
    
plt.show()

------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
Input [0;32mIn [3][0m, in [0;36m<cell line: 18>[0;34m()[0m
[1;32m     17[0m cm_points [38;5;241m=[39m ListedColormap([[38;5;124m"[39m[38;5;124m#007bff[39m[38;5;124m"[39m, [38;5;124m"[39m[38;5;124mmagenta[39m[38;5;124m"[39m])
[1;32m     18[0m [38;5;28;01mfor[39;00m ax, k [38;5;129;01min[39;00m [38;5;28mzip[39m(axs, ([38;5;241m0[39m,[38;5;241m1[39m)):
[0;32m---> 19[0m     gnb [38;5;241m=[39m [43mGaussianNB[49m()
[1;32m     20[0m     y_pred [38;5;241m=[39m gnb[38;5;241m.[39mfit(X_train, y_train)
[1;32m     21[0m     x [38;5;241m=[39m np[38;5;241m.[39marange([38;5;241m-[39m[38;5;241m2[39m, [38;5;241m3[39m, [38;5;241m0.05[39m)

[0;31mNameError[0m: name 'GaussianNB' is not defined
NameError: name 'GaussianNB' is not defined

